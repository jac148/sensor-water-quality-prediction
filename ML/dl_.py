# -*- coding: utf-8 -*-
"""DL_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DXTdJIF2GJF6EiW0vG74md63YtM0rOnb
"""

import torch
import pandas as pd
import numpy as np
from torch.utils.data import DataLoader, Dataset

class LTSF_DLinear(torch.nn.Module):
    def __init__(self, window_size, forcast_size, kernel_size, individual, feature_size):
        super(LTSF_DLinear, self).__init__()
        self.window_size = window_size
        self.forcast_size = forcast_size
        self.decompsition = series_decomp(kernel_size)
        self.individual = individual
        self.channels = feature_size

        if self.individual:
            self.Linear_Seasonal = torch.nn.ModuleList()
            self.Linear_Trend = torch.nn.ModuleList()
            for i in range(self.channels):
                linear_trend = torch.nn.Linear(window_size, forcast_size)
                linear_seasonal = torch.nn.Linear(window_size, forcast_size)
                self.Linear_Trend.append(linear_trend)
                self.Linear_Seasonal.append(linear_seasonal)
        # else:
        #     self.Linear_Trend = torch.nn.Linear(window_size, forcast_size)
        #     self.Linear_Seasonal = torch.nn.Linear(window_size, forcast_size)

        else:
            self.Linear_Trend = torch.nn.Linear(self.window_size, self.forcast_size)
            self.Linear_Trend_weight = torch.nn.Parameter((1/self.window_size)*torch.ones([self.forcast_size, self.window_size]))
            self.Linear_Seasonal = torch.nn.Linear(self.window_size,  self.forcast_size)
            self.Linear_Seasonal_weight = torch.nn.Parameter((1/self.window_size)*torch.ones([self.forcast_size, self.window_size]))


    def forward(self, x):
        trend_init, seasonal_init = self.decompsition(x)
        trend_init, seasonal_init = trend_init.permute(0, 2, 1), seasonal_init.permute(0, 2, 1)
        if self.individual:
            trend_output = torch.zeros([trend_init.size(0), trend_init.size(1), self.forcast_size],
                                       dtype=trend_init.dtype).to(trend_init.device)
            seasonal_output = torch.zeros([seasonal_init.size(0), seasonal_init.size(1), self.forcast_size],
                                          dtype=seasonal_init.dtype).to(seasonal_init.device)
            for idx in range(self.channels):
                trend_output[:, idx, :] = self.Linear_Trend[idx](trend_init[:, idx, :])
                seasonal_output[:, idx, :] = self.Linear_Seasonal[idx](seasonal_init[:, idx, :])
                #print("::::",trend_output)
        else:
            trend_output = self.Linear_Trend(trend_init)
            seasonal_output = self.Linear_Seasonal(seasonal_init)
        x = seasonal_output + trend_output
        return x.permute(0, 2, 1)

class series_decomp(torch.nn.Module):
    def __init__(self, kernel_size):
        super(series_decomp, self).__init__()
        self.moving_avg = moving_avg(kernel_size, stride=1)

    def forward(self, x):
        moving_mean = self.moving_avg(x)
        residual = x - moving_mean
        return moving_mean, residual

class moving_avg(torch.nn.Module):
    def __init__(self, kernel_size, stride):
        super(moving_avg, self).__init__()
        self.kernel_size = kernel_size
        self.avg = torch.nn.AvgPool1d(kernel_size=kernel_size, stride=stride, padding=3)

    def forward(self, x):
        #front = x[:, 0:1, :].repeat(1, (self.kernel_size - 1) // 2, 1)
        #end = x[:, -1:, :].repeat(1, (self.kernel_size - 1) // 2, 1)
        #x = torch.cat([front,x,end], dim=1)
        x = self.avg(x.permute(0, 2, 1))
        x = x.permute(0, 2, 1)

        x = x.index_select(dim=1, index=torch.tensor(range(1, x.shape[1])))
        return x
# LTSF_DLinear 클래스, moving_avg 클래스, series_decomp 클래스 등을 포함하여
# 이전에 정의한 클래스와 함수를 여기에 포함합니다.

class Data(Dataset):
    def __init__(self, X, Y):
        self.X = X
        self.Y = Y

    def __len__(self):
        return len(self.Y)

    def __getitem__(self, idx):
        return self.X[idx], self.Y[idx]

# 여기서 DB에서 데이터를 가져오는 예제 함수입니다.
def get_data_from_db():
    # 데이터베이스에서 데이터를 가져오는 로직을 여기에 구현합니다.
    # 예제에서는 임의의 데이터를 사용합니다.
    data = {
        'DO': [6 for i in range(288)]
    }
    return pd.DataFrame(data)

def standardize_data(data, mean_, std_):
    return (data - mean_) / std_

# 예측 함수 정의
def predict_future_quality(model, input_data, window_size, mean_, std_):
    model.eval()
    input_data = standardize_data(input_data, mean_, std_)
    input_data = input_data.values.reshape(1, -1, input_data.shape[1]).astype(np.float32)
    input_tensor = torch.tensor(input_data)

    with torch.no_grad():
        prediction = model(input_tensor)

    prediction = prediction.numpy().reshape(-1, input_data.shape[2])
    prediction = prediction * std_ + mean_  # 역표준화
    return prediction

mean_ = 5.16
std_ = 0.49

# 모델 불러오기
DLinear_model = LTSF_DLinear(window_size=288, forcast_size=36, kernel_size=6, individual=True, feature_size=1)
DLinear_model.load_state_dict(torch.load('/content/drive/MyDrive/Colab Notebooks/DLinear_model.pth'))

# 수질 값 불러오기
input_data = get_data_from_db()

# 예측 수행
predicted_quality = predict_future_quality(DLinear_model, input_data, 288, mean_, std_)

# 결과 출력
print("Predicted Future Water Quality:\n", predicted_quality)

# 마지막 원소 추출
last_predicted_quality = predicted_quality[-1]

# 결과 출력
print("DO after 3hour:", last_predicted_quality)

from google.colab import drive
drive.mount('/content/drive')